* C Collection Templates
  A collection of template style macros that can be used to define typed collections and their functions

  For instance, =define_dyn_list(int, cool_int)= would define functions and types for a dynamically allocated int list. All dynamic int list specific types and functions would be prefixed with cool_int.

** Currently Implemented Collections
   - Dynamic List (ArrayList)
     #+BEGIN_SRC C
       define_dyn_list(chosen_type, prefix)
     #+END_SRC
   - Circular Buffer
     #+BEGIN_SRC C
       define_circular_buffer(chosen_type, prefix)
     #+END_SRC
   - Linked List
     #+BEGIN_SRC C
       define_linked_list(chosen_type, prefix)
     #+END_SRC
   - Hash Table
     #+BEGIN_SRC C
       define_hash_map(key_type, data_type, prefix, hash_fn, equals_fn)

       // example usage:
       // you must provide a hash and equallity function:
       // defaults for char* keys are provided

       define_hash_map(char*, int, my, CCT_DEFAULT_STR_HASH, CCT_DEFAULT_STR_EQ)

       // a hash function has the signature:
       // size_t function_name(key_type key)

       // a equallity hash the signature
       // bool function_name(key_type a, key_type b)
     #+END_SRC
** Planned:
   - Binary Search Tree
   - Thread-safe versions of each
** Usage
   1. run make to build =collection_templates.h=
   2. use =collection_templates.h= in your project:
#+BEGIN_SRC c
  #include "collection_templates.h"

  define_dyn_list(int, int);

  int main (void) {
    struct int_dyn_list* list =  int_dyn_list_create(0);

    for (int i = 0; i < 2000; i++) {
      int_dyn_list_add(list, i);
    }

    for (int i = 0; i < 1000; i++) {
      int_dyn_list_remove(list, 0);
    }

    int_dyn_list_destroy(list, NULL);
  }

#+END_SRC

** Documentation
   Generated documentation can be seen here: (out of date)

   http://jordonbiondo.github.io/c_collection_templates/

   Documentation can be generated with =make docs=, (requires cldoc)

   Host the docs locally with =make serve_docs=

   Each collection is documented once generically and not for a certain type or prefix.
   For instance, if you are using a dynamic list of ints with a prefix of =my= like this:
   #+BEGIN_SRC C
     define_dyn_list(int, my);
   #+END_SRC
   The generated function for adding values to this type of list would look like this:
   #+BEGIN_SRC C
   bool my_dyn_list_add(struct my_dyn_list* list, int value)
   #+END_SRC
   however, the documentation will look ike this:
   #+BEGIN_SRC C
   bool prefix_dyn_list_add(struct prefix_dyn_list* list, dummy_type value)
   #+END_SRC

   When you look at the docs just replace =prefix= with your given prefix and =dummy_type= with whatever you are using and the docs will apply to any type of dynamic list.
